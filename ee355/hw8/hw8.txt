1a. A NULL reference leads to many bugs. When you try to access a reference variable that isn't referencing anything, you'll receive a NullReferenceException. 

1b. The value is initialized only once on the first call however, for each call afterwards, the value is carried on to the next call. So the first function is int & exampleb and the main calls example b. It was 599 the first call but now, 599 will carry over.

1c. In some languages, there is a process called boxing which wraps some or all of the value types in reference types. This means the values types can be used in the context of reference t hypes. Unboxing is the opposite, which unwrapes the value type. 

1d. The motivation behind "inline" functions is to reduce the time overhead of processing a program, however, if you're not careful, you could end up adding more overhead dependent on how long the function is. 

1e. C++ Functors - a class that acts like a function. Motivation is to allow you to create objects that look and act like a function. 


2. pseudo code for estimating pi
using namespace std;
int main() 
{ 
    int interval, i; 
    double rand_x, rand_y, origin_dist, pi; 
    int circle_points = 0, square_points = 0; 
  
    // Initializing rand() 
    srand(time(NULL)); 
  
    // Total Random numbers generated = possible x 
    // values * possible y values 
    for (i = 0; i < (INTERVAL * INTERVAL); i++) { 
  
        // Randomly generated x and y values 
        rand_x = double(rand() % (INTERVAL + 1)) / INTERVAL; 
        rand_y = double(rand() % (INTERVAL + 1)) / INTERVAL; 
  
        // Distance between (x, y) from the origin 
        origin_dist = rand_x * rand_x + rand_y * rand_y; 
  
        // Checking if (x, y) lies inside the define 
        // circle with R=1 
        if (origin_dist <= 1) 
            circle_points++; 
  
        // Total number of points generated 
        square_points++; 
  
        // estimated pi after this iteration 
        pi = double(4 * circle_points) / square_points; 
  
        // For visual understanding (Optional) 
        cout << rand_x << " " << rand_y << " " << circle_points 
             << " " << square_points << " - " << pi << endl << endl; 
  
        // Pausing estimation for first 10 values (Optional) 
        if (i < 20) 
            getchar(); 
    } 
  
    // Final Estimated Value 
    cout << "\nFinal Estimation of Pi = " << pi; 
  
    return 0; 
} 